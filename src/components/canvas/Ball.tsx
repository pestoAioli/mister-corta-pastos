/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { Suspense, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Solid_1: THREE.Mesh;
    Solid_2: THREE.Mesh;
  };
  materials: {
    white: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
  };
};

export default function Ball(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/ball.glb") as unknown as GLTFResult;
  return (
    <Suspense fallback={null}>
      <RigidBody>
        <group {...props} dispose={null}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Solid_1.geometry}
            material={materials.white}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Solid_2.geometry}
            material={materials.black}
          />
        </group>
      </RigidBody>
    </Suspense>
  );
}

useGLTF.preload("/ball.glb");

